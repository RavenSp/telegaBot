from aiogram import Dispatcher, Bot, types, filters
from settings import TOKEN, ADMIN_USER_IDS
from aiogram import F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from keyboards import get_standart_keyboard, get_admin_keyboard, get_cancel_kb
from db import sessionmaker
from middlewares.db import DbSessionMiddleware
from sqlalchemy.ext.asyncio import AsyncSession as Session
from sqlalchemy import text, select
from sqlalchemy.sql.functions import count as fn_count
from models import Clients, Services
import datetime
from sqlalchemy.exc import IntegrityError

bot = Bot(token=TOKEN, parse_mode='HTML')


dp = Dispatcher(storage=MemoryStorage())
dp.update.middleware(DbSessionMiddleware(session_pool=sessionmaker))

# @dp.message(F.from_user.id.in_(ADMIN_USER_IDS), filters.Command('start'))
# async def manager_start(message: types.Message):
#     await message.answer('–î–æ–±–æ—Ä–æ–µ —É—Ç—Ä–æ –º–µ–Ω–µ–¥–∂–µ—Ä!', reply_markup=get_admin_keyboard())

class ServiceState(StatesGroup):
    name = State()
    descr = State()
    price = State()


async def new_app_admin(client):
    for user_id in ADMIN_USER_IDS:
            await bot.send_message(
                chat_id=int(user_id), 
                text=f"""
<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–∏—ë–º</b>
<u>–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞:</u>
–§–∞–º–∏–ª–∏—è, –ò–º—è: <b>{client.last_name} {client.first_name}</b>
–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <b>{client.phone_number}</b>
-----
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –æ—Å—Ç–∞–≤–∏–≤—â–∏–º –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!
""", 
                parse_mode='HTML')


@dp.message(F.from_user.id.in_(ADMIN_USER_IDS), filters.Command('start'))
async def admin_start(message: types.Message, state: FSMContext):
    state.clear()
    await message.answer('test', reply_markup=get_admin_keyboard())



@dp.message(filters.Command('start'))
async def start(message: types.Message, session: Session):
    sql = fn_count(select(Clients.id).where(Clients.id==message.from_user.id))
    q = await session.execute(statement=sql)
    in_base = q.scalar() > 0
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}. –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—É! –ù–∞—á–Ω–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å–æ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥. –¢–∞–∫ –∂–µ –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º –∫ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥—É. –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —Å —ç—Ç–∏–º –±–æ—Ç–æ–º!", reply_markup=get_standart_keyboard(in_base=in_base))


@dp.message(filters.Command('help'))
async def help(message: types.Message):
    await message.answer("–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∞. –ù–æ –ø–æ—Ç–æ–º –æ–Ω –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–∞—á–∞–ª–æ–º –º–µ–≥–∞–ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–±—Ç—ã —Å –∑–∞–∫–∞–∑–º–∏ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤!")


@dp.message(F.contact)
async def contact_accept(message: types.Message, session: Session):
    if message.from_user.id == message.contact.user_id:
        new_client = Clients(
                id=message.contact.user_id,
                created=datetime.datetime.now(),
                first_name=message.contact.first_name,
                last_name=message.contact.last_name,
                phone_number=message.contact.phone_number
            )
        try:
            session.add(new_client)
            await session.commit()
        except IntegrityError:
            pass
        await new_app_admin(new_client)
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=get_standart_keyboard(in_base=True))


@dp.message(F.text == '–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º')
async def new_app(message: types.Message, session: Session):
    sql = select(Clients).where(Clients.id==message.from_user.id)
    clt = await session.execute(statement=sql)
    client = clt.first()
    if client is None:
        await message.answer("–î–ª—è –∑–∞–ø–∏—Å–∏ –∫ –º–∞—Å—Ç–µ—Ä—É –Ω—É–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º!\n–î–ª—è —ç—Ç–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º\" –≤ –º–µ–Ω—é –±–æ—Ç–∞", reply_markup=get_standart_keyboard(in_base=False))
        return 0
    await new_app_admin(client.Clients)
    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–ú–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=get_standart_keyboard(in_base=True))


@dp.message(F.text == '–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥')
async def service_list(message: types.Message, session: Session):
    s_list = await session.execute(statement=select(Services))
    s_list = s_list.fetchall()
    if len(s_list) == 0:
        if message.from_user.id in ADMIN_USER_IDS:
            await message.answer(text='–£—Å–ª—É–≥ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞–ª, –¥–æ–±–∞–≤—å—Ç–µ —É—Å–ª—É–≥–∏!', reply_markup=get_admin_keyboard())
            return None
        else:
            await message.answer(text='–£—Å–ª—É–≥ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç! –ù–æ –æ–Ω–∏ –≤–æ—Ç-–≤–æ—Ç –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã!', reply_markup=get_standart_keyboard())
            return None
    msg = '<b><u>–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:</u></b>\n'
    for ind, srv in enumerate(s_list):
        msg += f'\n<b>{ind+1}. {srv.Services.title}</b>\n{srv.Services.description}\n<b>üí∏ –¶–µ–Ω–∞: </b>{srv.Services.cost} —Ä—É–±.\n'
    await message.answer(text=msg)


@dp.message(F.from_user.id.in_(ADMIN_USER_IDS), F.text == '–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É')
async def add_service(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:', reply_markup=get_cancel_kb())
    await state.set_state(ServiceState.name)


@dp.message(F.from_user.id.in_(ADMIN_USER_IDS), F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
async def cancel_service(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(text='–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=get_admin_keyboard())


@dp.message(F.from_user.id.in_(ADMIN_USER_IDS), ServiceState.name)
async def name_service(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π —É—Å–ª—É–≥–∏', reply_markup=get_cancel_kb())
    await state.set_state(ServiceState.descr)
    

@dp.message(F.from_user.id.in_(ADMIN_USER_IDS), ServiceState.descr)
async def descr_service(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(text='–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:', reply_markup=get_cancel_kb())
    await state.set_state(ServiceState.price)


@dp.message(F.from_user.id.in_(ADMIN_USER_IDS), ServiceState.price)
async def price_service(message: types.Message, state: FSMContext, session: Session):
    await state.update_data(cost=message.text)
    new_service = await state.get_data()
    n_service = Services(**new_service)
    try:
        session.add(n_service)
        await session.commit()
    except IntegrityError:
            pass
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!', reply_markup=get_admin_keyboard())
    await state.clear()

@dp.message()
async def test_func(message: types.Message):
    await message.delete()